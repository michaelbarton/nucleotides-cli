"""\
Module for interacting with the filesystem relative to the current nucleotides task
directory. Each nucleotides benchmarking task takes place in a directory named for
the nucleotides task ID. This module functions to simplify getting the location of
where input files can be found, and where output files should be created.
"""
import os.path, json

import ruamel.yaml        as yaml
import boltons.fileutils  as fu
import nucleotides.util   as util

#########################################
#
# Files and directories with the nucleotides task
#
#########################################

def get_task_dir_path(app, location):
    """
    Return the path to the given directory within the nucleotides task. Creates
    the directory if it does not already exist.
    """
    dir_path = os.path.join(app['path'], location)
    fu.mkdir_p(dir_path)
    return os.path.join(app['path'], location)


def get_task_file_path(app, location):
    """
    Return the path to the given file within the given nucleotides task. Creates the
    parent directory if it does not already exist.
    """
    dir_path = os.path.dirname(os.path.join(app['path'], location))
    fu.mkdir_p(dir_path)
    return os.path.join(app['path'], location)


def get_task_path_file_without_name(app, name):
    """
    Return the path for the first file listed within the given nucleotides directory.
    """
    path = get_task_dir_path(app, name)
    return os.path.join(path, os.listdir(path)[0])


def get_output_biobox_file_arguments(app):
    """
    Return the contents of the biobox.yaml file generated by the Docker container.
    """
    with open(get_task_file_path(app, 'tmp/biobox.yaml')) as f:
        return yaml.load(f.read())['arguments']


#########################################
#
# Misc file operations
#
#########################################

# http://stackoverflow.com/a/4213255/91144
def sha_digest(filename):
    """
    Returns the sha256sum for a given file path.
    """
    import hashlib
    sha = hashlib.sha256()
    with open(filename,'rb') as f:
        for chunk in iter(lambda: f.read(sha.block_size), b''):
            sha.update(chunk)
    return sha.hexdigest()


def copy_file(src, dst):
    """
    Copies src to dst creating the destination directory if necessary.
    """
    import shutil
    fu.mkdir_p(os.path.dirname(dst))
    shutil.copy(src, dst)


def copy_tmp_file_to_outputs(app, src_file, dst_dir):
    """
    Copies a Docker container generated file from temporary directory to the output
    directory. The name of the file will be the 10-character truncated sha256sum of
    the file.
    """
    src = os.path.join(app['path'], 'tmp', src_file)
    dst = os.path.join(app['path'], 'outputs', dst_dir, sha_digest(src)[:10])
    copy_file(src, dst)


def copy_log_file_to_outputs(app):
    """
    Copies the log.txt file created by the Docker container to the
    container_runtime_metrics directory.
    """
    src = get_task_file_path(app, 'meta/log.txt')
    dst = get_task_file_path(app, 'outputs/container_runtime_metrics/log.txt')
    copy_file(src, dst)


def create_runtime_metric_file(app, metrics):
    """
    Parses the raw cgroup data collected from the Docker container into a new file
    containing a JSON dictionary of nucleotides metrics suitable for upload to the
    nuclotides API.
    """
    dst = get_task_file_path(app, 'outputs/container_runtime_metrics/metrics.json')
    with open(dst, 'w') as f:
        f.write(json.dumps(metrics))
